# CodiesVibe Backend Development Environment
# Docker Compose configuration for backend services with gateway
# Use: docker-compose -f docker-compose.backend.yml up

version: '3.8'

services:
  # API Gateway - Routes external traffic to backend services
  gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile.gateway
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    container_name: codiesvibe-gateway
    ports:
      - "4000:4000"  # External gateway port
    volumes:
      # Mount nginx config for development hot-reload
      - ./backend/gateway/nginx.conf:/etc/nginx/nginx.conf:ro
      # Log volume for debugging
      - gateway_logs:/var/log/nginx
    networks:
      - codiesvibe-network
    depends_on:
      nestjs-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024

  # NestJS API Service
  nestjs-api:
    build:
      context: ./backend/nestjs-api
      dockerfile: Dockerfile.nestjs
      target: development
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    container_name: codiesvibe-nestjs-api
    # Internal port only - accessed through gateway
    expose:
      - "4001"
    volumes:
      # Mount source code for development hot-reload
      - ./backend/nestjs-api/src:/app/src
      - ./backend/shared:/app/shared
      # Mount package.json for hot reload
      - ./backend/nestjs-api/package.json:/app/package.json
      # Log volume
      - nestjs_logs:/app/logs
    networks:
      - codiesvibe-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      start_period: 15s
      retries: 3
    environment:
      - NODE_ENV=development
      - PORT=4001
      # Database connections
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/codiesvibe?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      # Security
      - JWT_SECRET=development-jwt-secret-change-in-production
      - COOKIE_SECRET=development-cookie-secret-min-32-chars
      - CSRF_SECRET=development-csrf-secret-min-32-chars
      # GitHub OAuth (development)
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-your_github_client_id}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-your_github_client_secret}
      - GITHUB_CALLBACK_URL=http://localhost:4000/api/auth/github/callback
      # Rate limiting
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=100
      # Production settings
      - TRUST_PROXY=true
      - SHUTDOWN_TIMEOUT=30000

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: codiesvibe-mongodb
    ports:
      - "27017:27017"  # Exposed for direct development access
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      # Custom initialization script
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - codiesvibe-network
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password123
      - MONGO_INITDB_DATABASE=codiesvibe
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: codiesvibe-redis
    ports:
      - "6379:6379"  # Exposed for direct development access
    volumes:
      - redis_data:/data
      # Redis configuration
      - ./includes/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - codiesvibe-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass redis123
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3

# Named volumes for data persistence
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  gateway_logs:
    driver: local
  nestjs_logs:
    driver: local

# Networks
networks:
  codiesvibe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16