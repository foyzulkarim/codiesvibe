# CodiesVibe Extended Monitoring Environment
# Docker Compose configuration for extended monitoring stack
# Integrates with infrastructure stack (docker-compose.infra.yml)
# Uses offset ports to avoid conflicts with infrastructure monitoring

services:
  # Extended Grafana with Application-Specific Dashboards
  grafana-extended:
    image: grafana/grafana:10.2.0
    container_name: codiesvibe-grafana-extended
    ports:
      - "3002:3000"  # Offset port to avoid conflict with infrastructure Grafana (3001)
    environment:
      # Admin configuration
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-codiesvibe-admin-123}
      # Database configuration
      - GF_DATABASE_TYPE=sqlite3
      - GF_DATABASE_PATH=/var/lib/grafana/grafana.db
      # Server configuration
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:3002/
      - GF_SERVER_SERVE_FROM_SUB_PATH=false
      - GF_SERVER_DOMAIN=localhost
      # Enhanced security settings
      - GF_SECURITY_COOKIE_SECURE=false
      - GF_SECURITY_COOKIE_SAMESITE=lax
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=false
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      # Data source configuration
      - GF_DATASOURCES_DEFAULT_NAME=Prometheus-Extended
      # Enhanced plugins for application monitoring
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,grafana-polystat-panel
      # Logging configuration
      - GF_LOG_LEVEL=info
      - GF_LOG_MODE=console file
      - GF_LOG_FILTERS=rendering:debug
      # Performance settings
      - GF_RENDERING_SERVER_URL=http://localhost:8081/render
      - GF_RENDERING_CALLBACK_URL=http://localhost:3000/
    volumes:
      # Extended Grafana configuration
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_extended_data:/var/lib/grafana
      # Custom dashboard definitions
      - grafana_extended_logs:/var/log/grafana
    networks:
      - codiesvibe-network
    depends_on:
      - prometheus-extended
      - alertmanager
    restart: unless-stopped
    # Enhanced security for monitoring
    user: "472:472"  # grafana user
    read_only: true
    tmpfs:
      - /tmp:rw,size=100M,mode=1777
      - /var/lib/grafana/plugins:rw,size=50M,mode=0755
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    # Resource limits for extended monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Extended Prometheus with Application Metrics
  prometheus-extended:
    image: prom/prometheus:v2.48.0
    container_name: codiesvibe-prometheus-extended
    ports:
      - "9091:9090"  # Offset port to avoid conflict with infrastructure Prometheus (9090)
    command:
      - '--config.file=/etc/prometheus/prometheus-extended.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=http://localhost:9091'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=exemplar-storage'
    volumes:
      # Extended Prometheus configuration
      - ./monitoring/prometheus-extended.yml:/etc/prometheus/prometheus-extended.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_extended_data:/prometheus
    networks:
      - codiesvibe-network
    depends_on:
      - node-exporter
    restart: unless-stopped
    # Enhanced security for Prometheus
    user: "65534:65534"  # nobody user
    read_only: true
    tmpfs:
      - /tmp:rw,size=100M,mode=1777
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.7'
        reservations:
          memory: 512M
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  # AlertManager for Application Alerts
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: codiesvibe-alertmanager
    ports:
      - "9093:9093"  # Standard AlertManager port (no conflict)
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address=0.0.0.0:9094'
    volumes:
      # AlertManager configuration
      - ./monitoring/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    networks:
      - codiesvibe-network
    restart: unless-stopped
    environment:
      # Notification configuration
      - SMTP_SMARTHOST=${SMTP_SMARTHOST:-mailhog:1025}
      - SMTP_FROM=${SMTP_FROM:-alerts@codiesvibe.local}
      - SLACK_API_URL=${SLACK_API_URL:-}
      - WEBHOOK_URL=${WEBHOOK_URL:-}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    container_name: codiesvibe-node-exporter
    ports:
      - "9100:9100"  # Standard Node Exporter port (per allocation docs)
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.systemd'
      - '--collector.processes'
    volumes:
      # System monitoring volumes
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - codiesvibe-network
    restart: unless-stopped
    pid: host
    # Read-only for security
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Extended Loki for Application Logs
  loki-extended:
    image: grafana/loki:2.9.0
    container_name: codiesvibe-loki-extended
    ports:
      - "3101:3100"  # Offset port to avoid conflict with infrastructure Loki (3100)
    command: -config.file=/etc/loki/loki-extended.yml
    volumes:
      # Extended Loki configuration
      - ./monitoring/loki-extended.yml:/etc/loki/loki-extended.yml:ro
      - loki_extended_data:/loki
    networks:
      - codiesvibe-network
    restart: unless-stopped
    environment:
      # Storage configuration
      - LOKI_STORAGE_TYPE=filesystem
      - LOKI_STORAGE_FILESYSTEM_DIRECTORY=/loki
      # Retention configuration
      - LOKI_RETENTION_ENABLED=true
      - LOKI_RETENTION_PERIOD=720h  # 30 days
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:2.9.0
    container_name: codiesvibe-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      # Promtail configuration
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      # Docker logs
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      # Application logs
      - promtail_positions:/tmp/positions
    networks:
      - codiesvibe-network
    depends_on:
      - loki-extended
    restart: unless-stopped
    environment:
      # Loki endpoint
      - LOKI_URL=http://loki-extended:3100/loki/api/v1/push
      # Log parsing
      - PROMTAIL_LOG_LEVEL=info

  # Application Metrics Exporter (Custom)
  app-metrics-exporter:
    build:
      context: ./monitoring/exporters
      dockerfile: Dockerfile.app-exporter
    container_name: codiesvibe-app-metrics
    ports:
      - "9102:8080"
    environment:
      # Backend endpoint for metrics collection
      - BACKEND_URL=http://backend:4000
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/codiesvibe?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      # Metrics collection configuration
      - SCRAPE_INTERVAL=30s
      - METRICS_PORT=8080
      - LOG_LEVEL=info
      # Application-specific metrics
      - COLLECT_BUSINESS_METRICS=true
      - COLLECT_PERFORMANCE_METRICS=true
      - COLLECT_ERROR_METRICS=true
    networks:
      - codiesvibe-network
    restart: unless-stopped
    depends_on:
      - prometheus-extended
    # Security for custom exporter
    read_only: true
    tmpfs:
      - /tmp:rw,size=50M,mode=1777
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    # Resource limits for metrics exporter
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/metrics"]
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3

# External network configuration (must be created by docker-compose.infra.yml first)
networks:
  codiesvibe-network:
    external: true
    name: codiesvibe-network

# Volume definitions for monitoring data persistence
volumes:
  # Prometheus extended data
  prometheus_extended_data:
    driver: local
  # Grafana extended data and logs
  grafana_extended_data:
    driver: local
  grafana_extended_logs:
    driver: local
  # AlertManager data
  alertmanager_data:
    driver: local
  # Loki extended data
  loki_extended_data:
    driver: local
  # Promtail positions
  promtail_positions:
    driver: local