# CodiesVibe Development Environment
# Docker Compose configuration for development with hot reload and debugging
# Integrates with infrastructure stack (docker-compose.infra.yml)

services:
  # Frontend Development Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: codiesvibe-frontend-dev
    ports:
      - "3000:3000"  # Frontend development server
      - "5173:5173"  # Vite HMR websocket port
    volumes:
      # Bind mount for hot reload with optimized caching
      - .:/app
      - frontend_node_modules:/app/node_modules  # Use named volume for better performance
      - /app/dist          # Prevent overwriting build output
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://backend:4000  # Internal service communication
      - VITE_APP_VERSION=${npm_package_version:-dev}
      - VITE_BUILD_DATE=${BUILD_DATE:-$(date)}
      - VITE_GIT_COMMIT=${GIT_COMMIT:-dev}
      # Vite HMR configuration for Docker
      - VITE_HMR_HOST=0.0.0.0
      - VITE_HMR_PORT=5173
    networks:
      - codiesvibe-network
    stdin_open: true  # Enable interactive mode
    tty: true         # Allocate pseudo-TTY
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "node", "frontend/healthcheck.js"]
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3

  # Backend Development Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: codiesvibe-backend-dev
    ports:
      - "4000:4000"  # Backend API server
      - "9229:9229"  # Node.js debugging port
    volumes:
      # Bind mount for hot reload with optimized caching
      - ./backend:/app
      - backend_node_modules:/app/node_modules  # Use named volume for better performance
      # Note: Remove /app/dist volume to allow NestJS to manage build directory
    environment:
      - NODE_ENV=development
      - PORT=4000
      - DEBUG_PORT=9229  # Debugging port configuration
      # Infrastructure service connections (from docker-compose.infra.yml)
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/codiesvibe?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      # Application secrets (use secure values in production)
      - JWT_SECRET=dev-jwt-secret-key-change-in-production
      - COOKIE_SECRET=dev-cookie-secret-min-32-chars-dev
      - CSRF_SECRET=dev-csrf-secret-min-32-chars-dev
      # CORS configuration for development
      - CORS_ORIGIN=http://frontend:3000,http://localhost:3000
      # Rate limiting (relaxed for development)
      - RATE_LIMIT_WINDOW=900000
      - RATE_LIMIT_MAX=1000
      # Development settings
      - TRUST_PROXY=false
      - SHUTDOWN_TIMEOUT=30000
      # GitHub OAuth (configure with your values)
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-your_github_client_id}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-your_github_client_secret}
      - GITHUB_CALLBACK_URL=http://localhost:4000/api/auth/github/callback
      # Monitoring endpoints (available from infrastructure)
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - LOKI_URL=http://loki:3100
    networks:
      - codiesvibe-network
    stdin_open: true  # Enable interactive mode
    tty: true         # Allocate pseudo-TTY
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3

# External network configuration (must be created by docker-compose.infra.yml first)
networks:
  codiesvibe-network:
    external: true
    name: codiesvibe-network

# Volume definitions for data persistence
volumes:
  # Development cache volumes for better performance
  frontend_node_modules:
    driver: local
  backend_node_modules:
    driver: local