# CodiesVibe Production Nginx Configuration
# Optimized for React + Vite frontend with NestJS backend
# Security-hardened with comprehensive headers and rate limiting

# Worker configuration for production
worker_processes auto;
worker_rlimit_nofile 65535;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Enhanced logging with additional fields and Cloudflare support
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time" '
                    'cf_ray="$http_cf_ray" cf_country="$http_cf_ipcountry"';

    log_format json escape=json '{'
        '"time":"$time_iso8601",'
        '"remote_addr":"$remote_addr",'
        '"request":"$request",'
        '"status":$status,'
        '"body_bytes_sent":$body_bytes_sent,'
        '"request_time":$request_time,'
        '"http_user_agent":"$http_user_agent",'
        '"http_referer":"$http_referer",'
        '"cf_ray":"$http_cf_ray",'
        '"cf_country":"$http_cf_ipcountry",'
        '"cf_connecting_ip":"$http_cf_connecting_ip"'
    '}';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Optimized basic settings for production
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;  # Hide nginx version
    client_max_body_size 16M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;

    # Buffer settings for performance
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;

    # Enhanced gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        text/x-component
        application/json
        application/javascript
        application/x-javascript
        application/xml
        application/xml+rss
        application/atom+xml
        application/rss+xml
        image/svg+xml
        font/truetype
        font/opentype
        application/vnd.ms-fontobject;

    # Brotli compression (if module available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/css application/javascript application/json;

    # Cloudflare real IP configuration - Dynamic IP ranges
    # This includes auto-updated Cloudflare IP ranges to address security concerns
    # about hardcoded IP ranges becoming outdated
    include /etc/nginx/includes/cloudflare-ips.conf;

    # Enhanced rate limiting with multiple zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=50r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Upstream backend with health checks and load balancing
    upstream backend {
        server backend:4000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }

    # SSL/TLS Configuration (for future HTTPS setup)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security: Map for blocking bad user agents and requests
    map $http_user_agent $bad_bot {
        default 0;
        ~*malicious 1;
        ~*bot 0;
        ~*crawl 0;
        ~*spider 0;
        "" 1;  # Block empty user agents
    }

    # Main Server Block
    server {
        listen 80;
        server_name ${MAIN_DOMAIN:-localhost} ${API_DOMAIN:-api.localhost};
        
        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # Block bad bots
        if ($bad_bot) {
            return 444;
        }

        # Comprehensive security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header X-Download-Options "noopen" always;
        add_header X-Permitted-Cross-Domain-Policies "none" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self' data: https: blob:; font-src 'self' data: https://fonts.gstatic.com; connect-src 'self' ws: wss:; frame-ancestors 'self'; base-uri 'self'; form-action 'self';" always;


        # Static Assets with Advanced Caching and Compression
        location /assets/ {
            limit_req zone=static burst=100 nodelay;
            alias /usr/share/nginx/html/assets/;
            
            # Long-term caching for versioned assets
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Enable pre-compressed files
            gzip_static on;
            
            # Add security headers for assets
            add_header X-Content-Type-Options "nosniff";
            
            # Handle CORS for fonts and resources
            location ~* \.(woff|woff2|ttf|eot)$ {
                add_header Access-Control-Allow-Origin "*";
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Favicon and robots.txt
        location ~* ^/(favicon\.ico|robots\.txt|sitemap\.xml)$ {
            root /usr/share/nginx/html;
            expires 7d;
            add_header Cache-Control "public";
            access_log off;
        }

        # Frontend Routes (React Router with SPA support)
        location / {
            limit_req zone=general burst=10 nodelay;
            
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ @fallback;
            
            # Specific caching rules for different file types
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
                add_header X-Content-Type-Options "nosniff";
            }
            
            # Aggressive caching for static assets
            location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|webp|avif|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Content-Type-Options "nosniff";
                gzip_static on;
            }
            
            # Media files with moderate caching
            location ~* \.(mp4|mp3|webm|ogg|avi)$ {
                expires 30d;
                add_header Cache-Control "public";
                add_header X-Content-Type-Options "nosniff";
            }
        }

        # Fallback for SPA routing
        location @fallback {
            rewrite ^.*$ /index.html last;
        }

        # Custom error pages
        error_page 404 /index.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }

        # Rate limiting error pages
        error_page 429 @rate_limit;
        location @rate_limit {
            add_header Content-Type "application/json" always;
            return 429 '{"error":"Rate limit exceeded","retry_after":"60"}';
        }

        # Security: Deny access to hidden files and directories
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Security: Deny access to sensitive files
        location ~* \.(env|log|ini|conf|sql|backup|bak|old|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 404;
        }

        # Security: Block common exploitation paths
        location ~* /(wp-admin|wp-login|xmlrpc|admin|phpmyadmin|mysql|database) {
            deny all;
            access_log off;
            log_not_found off;
            return 444;
        }

        # Security: Block requests with suspicious patterns
        location ~* \.(php|jsp|asp|cgi)$ {
            deny all;
            access_log off;
            log_not_found off;
            return 444;
        }

        # Monitoring endpoint for health checks
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # API Server Block - Dedicated subdomain for backend API
    server {
        listen 80;
        server_name ${API_DOMAIN:-api.localhost};

        # Connection limiting
        limit_conn conn_limit_per_ip 20;
        limit_conn conn_limit_per_server 1000;

        # Block bad bots
        if ($bad_bot) {
            return 444;
        }

        # API-specific security headers
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Proxy all requests to backend (CORS handled by backend)
        location / {

            # Apply rate limiting based on request type
            limit_req zone=api burst=20 nodelay;

            # Proxy all requests to backend
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header Connection "";
            proxy_http_version 1.1;

            # Optimized timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Enhanced buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            proxy_temp_file_write_size 8k;
        }

        # Authentication routes with stricter rate limiting
        location /auth/ {
            limit_req zone=auth burst=5 nodelay;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;

            # Enhanced timeout settings for auth
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health Check Endpoint (bypass rate limiting)
        location /health {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Health check specific settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
    }

    # Additional server block for HTTPS (when SSL is configured)
    # server {
    #     listen 443 ssl http2;
    #     server_name your-domain.com;
    #
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #
    #     # Include all the same location blocks as above
    # }
}