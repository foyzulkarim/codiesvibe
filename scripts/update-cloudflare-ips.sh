#!/bin/bash

# CodiesVibe Cloudflare IP Updater
# This script dynamically updates nginx configuration with current Cloudflare IP ranges
# Addressing security concerns about hardcoded IP ranges becoming outdated

set -e

# Configuration
CLOUDFLARE_IPS_FILE="/tmp/cloudflare-ips.conf"
NGINX_INCLUDE_DIR="/etc/nginx/includes"
CLOUDFLARE_IPV4_URL="https://www.cloudflare.com/ips-v4"
CLOUDFLARE_IPV6_URL="https://www.cloudflare.com/ips-v6"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
}

# Check if required tools are installed
check_dependencies() {
    if ! command -v curl &> /dev/null; then
        error "curl is required but not installed"
        exit 1
    fi

    if ! command -v nginx &> /dev/null; then
        warn "nginx not found in PATH - will test reload if available"
    fi
}

# Fetch Cloudflare IP ranges
fetch_cloudflare_ips() {
    log "Fetching Cloudflare IP ranges..."

    # Create temporary file
    temp_file=$(mktemp)

    # Add header
    echo "# Cloudflare IP ranges - Auto-generated on $(date)" > "$temp_file"
    echo "# Do not edit manually - This file is generated by update-cloudflare-ips.sh" >> "$temp_file"
    echo "" >> "$temp_file"

    # Fetch IPv4 ranges
    if curl -s "$CLOUDFLARE_IPV4_URL" >> "$temp_file"; then
        log "Successfully fetched IPv4 ranges"
    else
        error "Failed to fetch IPv4 ranges"
        rm -f "$temp_file"
        exit 1
    fi

    echo "" >> "$temp_file"

    # Fetch IPv6 ranges
    if curl -s "$CLOUDFLARE_IPV6_URL" >> "$temp_file"; then
        log "Successfully fetched IPv6 ranges"
    else
        warn "Failed to fetch IPv6 ranges - continuing with IPv4 only"
    fi

    # Move to final location
    mv "$temp_file" "$CLOUDFLARE_IPS_FILE"
    log "Cloudflare IP ranges saved to $CLOUDFLARE_IPS_FILE"
}

# Update nginx configuration
update_nginx_config() {
    log "Updating nginx configuration..."

    # Create include directory if it doesn't exist
    mkdir -p "$NGINX_INCLUDE_DIR"

    # Create nginx include file
    cat > "$NGINX_INCLUDE_DIR/cloudflare-ips.conf" << EOF
# Cloudflare real IP configuration - Auto-generated on $(date)
# Trust Cloudflare IP ranges to get real client IPs

include $CLOUDFLARE_IPS_FILE;

# Use CF-Connecting-IP header or fallback to X-Forwarded-For
real_ip_header CF-Connecting-IP;
real_ip_recursive on;
EOF

    log "Nginx configuration updated at $NGINX_INCLUDE_DIR/cloudflare-ips.conf"
}

# Test nginx configuration
test_nginx_config() {
    if command -v nginx &> /dev/null; then
        log "Testing nginx configuration..."
        if nginx -t 2>/dev/null; then
            log "Nginx configuration test passed"
            return 0
        else
            error "Nginx configuration test failed"
            return 1
        fi
    else
        warn "nginx command not found - skipping configuration test"
        return 0
    fi
}

# Reload nginx
reload_nginx() {
    if command -v nginx &> /dev/null; then
        log "Reloading nginx..."
        if nginx -s reload 2>/dev/null; then
            log "Nginx reloaded successfully"
        else
            warn "Failed to reload nginx - manual reload required"
        fi
    else
        warn "nginx command not found - manual reload required"
    fi
}

# Main execution
main() {
    log "Starting Cloudflare IP update process..."

    check_dependencies
    fetch_cloudflare_ips
    update_nginx_config

    if test_nginx_config; then
        reload_nginx
        log "Cloudflare IP update completed successfully"
    else
        error "Failed to update Cloudflare IPs - nginx configuration error"
        exit 1
    fi
}

# Run main function
main "$@"