# CodiesVibe Production Environment
# Docker Compose configuration for production deployment with Nginx reverse proxy
# Integrates with infrastructure stack (docker-compose.infra.yml)

services:
  # Nginx Reverse Proxy and Static File Server
  nginx:
    image: nginx:1.25-alpine
    container_name: codiesvibe-nginx
    # Install curl for health checks
    command: sh -c "apk add --no-cache curl && nginx -g 'daemon off;'"
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS (for future SSL termination)
    volumes:
      # Nginx configuration
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # Cloudflare IP ranges script and configuration
      - ./scripts:/scripts:ro
      - ./includes:/etc/nginx/includes:ro
      # Static files from frontend build
      - frontend_dist:/usr/share/nginx/html:ro
      # SSL certificates (for future use)
      - nginx_ssl:/etc/nginx/ssl:ro
    environment:
      - NGINX_ENVSUBST_TEMPLATE_DIR=/etc/nginx/templates
      - NGINX_ENVSUBST_TEMPLATE_SUFFIX=.template
      - BACKEND_HOST=gateway
      - BACKEND_PORT=4000
    networks:
      - codiesvibe-network
    depends_on:
      frontend-init:
        condition: service_completed_successfully
      gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3

  # Frontend Init Container - Builds and copies assets, then exits
  frontend-init:
    # Use pre-built GHCR image for production deployments
    # image: ghcr.io/foyzulkarim/codiesvibe-frontend:${VERSION:-latest}
    # Fallback: Build locally if GHCR image unavailable
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
        # Vite build-time environment variables
        - VITE_API_URL=${VITE_API_URL:-https://api.codiesvibe.com/api}
        - NODE_ENV=production
    container_name: codiesvibe-frontend-init
    volumes:
      # Share built files with Nginx
      - frontend_dist:/shared/dist
    command: sh -c "echo 'Copying frontend assets...' && cp -r /usr/share/nginx/html/* /shared/dist/ && echo 'Frontend assets copied successfully' && ls -la /shared/dist/"
    environment:
      - NODE_ENV=production
      # Note: VITE_* vars are embedded at build time, these are for container metadata only
      - VITE_APP_VERSION=${VERSION:-production}
      - VITE_BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
      - VITE_GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
    networks:
      - codiesvibe-network
    restart: "no"  # One-time init container
    user: root  # Need root to write to volume

  # Backend Seed Init Container - Seeds database and then exits
  backend-seed:
    # Use the seeding stage which includes source files
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: seeding
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    container_name: codiesvibe-backend-seed
    environment:
      - NODE_ENV=production
      - PORT=4000
      # Infrastructure service connections (from docker-compose.infra.yml)
      - MONGODB_URI=mongodb://admin:password123@mongodb:27017/codiesvibe?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      # Minimal environment for seeding
      - JWT_SECRET=${JWT_SECRET:-production-jwt-secret-change-immediately}
      - COOKIE_SECRET=${COOKIE_SECRET:-production-cookie-secret-min-32-chars}
      - CSRF_SECRET=${CSRF_SECRET:-production-csrf-secret-min-32-chars}
    networks:
      - codiesvibe-network
    command: sh -c "echo 'Starting database seeding...' && npm run seed:production && echo 'Database seeding completed successfully'"
    restart: "no"  # One-time init container



  # API Gateway Service - Production overrides
  gateway:
    extends:
      file: docker-compose/services/docker-compose.gateway.yml
      service: gateway
    container_name: codiesvibe-gateway-prod
    ports:
      - "4000:4000"  # Gateway external port
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_KEEPALIVE_TIMEOUT=65
    depends_on:
      nestjs-api:
        condition: service_healthy

  # Backend Production Service - Production overrides
  nestjs-api:
    extends:
      file: docker-compose/services/docker-compose.nestjs.yml
      service: nestjs-api
    # Override dependencies - infrastructure services come from docker-compose.infra.yml
    depends_on:
      backend-seed:
        condition: service_completed_successfully
    # Use pre-built GHCR image for production deployments
    image: ghcr.io/foyzulkarim/codiesvibe-backend:${VERSION:-latest}
    # Fallback: Build locally if GHCR image unavailable
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: production
      args:
        - BUILD_DATE=${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        - GIT_COMMIT=${GIT_COMMIT:-$(git rev-parse --short HEAD)}
        - VERSION=${VERSION:-latest}
    container_name: codiesvibe-backend-prod
    # Internal port only - accessed through gateway
    expose:
      - "4001"
    environment:
      - NODE_ENV=production
      - PORT=4001
      # Production secrets (use Docker secrets or external secret management in real production)
      - JWT_SECRET=${JWT_SECRET:-production-jwt-secret-change-immediately}
      - COOKIE_SECRET=${COOKIE_SECRET:-production-cookie-secret-min-32-chars}
      - CSRF_SECRET=${CSRF_SECRET:-production-csrf-secret-min-32-chars}
      # CORS configuration for subdomain architecture
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost,https://codiesvibe.com,https://api.codiesvibe.com}
      # Production rate limiting
      - RATE_LIMIT_WINDOW=900000  # 15 minutes
      - RATE_LIMIT_MAX=100        # Stricter than development
      # Production settings
      - TRUST_PROXY=true
      - SHUTDOWN_TIMEOUT=30000
      # GitHub OAuth (configure with production values)
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - GITHUB_CALLBACK_URL=${GITHUB_CALLBACK_URL:-https://your-domain.com/api/auth/github/callback}
      # Monitoring endpoints (available from infrastructure)
      - PROMETHEUS_URL=http://prometheus:9090
      - GRAFANA_URL=http://grafana:3000
      - LOKI_URL=http://loki:3100
      # Logging configuration
      - LOG_LEVEL=${LOG_LEVEL:-info}
    # Security: read-only filesystem with specific writable paths
    read_only: true
    tmpfs:
      - /tmp:rw,size=100M,mode=1777
      - /app/logs:rw,size=50M,mode=0755
    # Security: Drop all capabilities except required ones
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true

  # Fastify API Service - Production overrides
  fastify-api:
    extends:
      file: docker-compose/services/docker-compose.fastify.yml
      service: fastify-api
    # Remove infrastructure dependencies - they're managed by docker-compose.infra.yml
    depends_on: []
    container_name: codiesvibe-fastify-api-prod
    # Internal port only - accessed through gateway or NestJS
    expose:
      - "4002"
    environment:
      - NODE_ENV=production
      - PORT=4002
      # MCP Server Configuration
      - MCP_SERVER_URL=http://localhost:3001
      # Ollama Configuration (production setup would need external Ollama service)
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - OLLAMA_MODEL=llama3.2
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      # CORS Configuration
      - CORS_ORIGIN=${CORS_ORIGIN:-https://codiesvibe.com,https://api.codiesvibe.com}
    # Security: read-only filesystem with specific writable paths
    read_only: true
    tmpfs:
      - /tmp:rw,size=100M,mode=1777
      - /app/logs:rw,size=50M,mode=0755
    # Security: Drop all capabilities except required ones
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    # Security: Prevent privilege escalation
    security_opt:
      - no-new-privileges:true

# External network configuration (created by docker-compose.infra.yml)
networks:
  codiesvibe-network:
    external: true
    name: codiesvibe-network

# Volume definitions for production data
volumes:
  # Frontend build artifacts shared between frontend build and nginx
  frontend_dist:
    driver: local
  # SSL certificates for Nginx
  nginx_ssl:
    driver: local
  # Nginx includes for dynamic configurations
  nginx_includes:
    driver: local
  # Nginx cache and temporary files
  nginx_cache:
    driver: local
